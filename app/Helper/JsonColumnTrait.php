<?php
/**
 * Created by PhpStorm.
 * User: mixmedia
 * Date: 2018/4/20
 * Time: 12:42
 */

namespace App\Helper;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Pagination\Paginator;

/**
 * JSON 字段局部更新
 * Trait JsonColumnTrait
 * @package App\Helper
 */
trait JsonColumnTrait
{
    protected function performUpdate(Builder $query)
    {
        $dirty = $this->getDirty();

        $self = $this;

        $casts_keys = array_keys(array_filter($this->casts, function ($item){
            return $item == 'array';
        }));

        $json_dirty = array_filter($dirty, function ($item, $key) use ($casts_keys) {
            return in_array($key, $casts_keys);
        }, ARRAY_FILTER_USE_BOTH);

        /**
         * 对json 字段进行 getDirty
         * 整理出JSON_SET SQL语句
         */
        $json_dot_dirty = [];
        array_walk($json_dirty, function ($item, $key) use ($self, &$json_dot_dirty) {
            /**
             * json 转 array，扁平化array
             */
            $json_data = json_decode($item, 1);
            $ori_json_data = json_decode(\Arr::get($self->original, $key, ''), 1);
            $json_dot_data = !empty($json_data) ? \Arr::dot($json_data) : [];
            $ori_json_dot_data = !empty($ori_json_data) ? \Arr::dot($ori_json_data)  : [];

            $dot_diff = array_diff_assoc($json_dot_data, $ori_json_dot_data);


            $sql = collect($dot_diff)
                ->map(function ($item, $key){
                    $path = "'$.{$key}'";
                    $path = preg_replace('/\.([0-9]+)/', '[$1]', $path);
                    $val = is_bool($item) ? $item : "'{$item}'";

                    return [$path, $val];
                })->reduce(function ($last, $item){
                    return array_merge($last, $item);
                }, []);

            $sql = implode(', ', $sql);

            $json_dot_dirty[$key] = \DB::raw("JSON_SET(`{$key}`, {$sql})");
        });

        /**
         * 临时去掉新填充的数据
         */
        array_walk($json_dot_dirty, function ($item, $key) use ($self) {
            $self->attributes[$key] = $self->original[$key];
        });

        $result =  parent::performUpdate($query); // TODO: Change the autogenerated stub
        /**
         * 恢复新填充的数据
         */
        array_walk($json_dot_dirty, function ($item, $key) use ($self, $json_dirty) {
            $self->attributes[$key] = $json_dirty[$key];
        });

        if (count($json_dot_dirty) > 0) {
            \DB::table($this->table)
                ->where($this->primaryKey, $this[$this->primaryKey])->update($json_dot_dirty);
        }

        return $result;
    }
}